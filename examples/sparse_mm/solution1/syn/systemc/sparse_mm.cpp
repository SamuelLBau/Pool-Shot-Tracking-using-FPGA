// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "sparse_mm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sparse_mm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sparse_mm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> sparse_mm::ap_ST_st1_fsm_0 = "1";
const sc_lv<18> sparse_mm::ap_ST_st2_fsm_1 = "10";
const sc_lv<18> sparse_mm::ap_ST_st3_fsm_2 = "100";
const sc_lv<18> sparse_mm::ap_ST_st4_fsm_3 = "1000";
const sc_lv<18> sparse_mm::ap_ST_st5_fsm_4 = "10000";
const sc_lv<18> sparse_mm::ap_ST_st6_fsm_5 = "100000";
const sc_lv<18> sparse_mm::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<18> sparse_mm::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<18> sparse_mm::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<18> sparse_mm::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<18> sparse_mm::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<18> sparse_mm::ap_ST_st12_fsm_11 = "100000000000";
const sc_lv<18> sparse_mm::ap_ST_st13_fsm_12 = "1000000000000";
const sc_lv<18> sparse_mm::ap_ST_st14_fsm_13 = "10000000000000";
const sc_lv<18> sparse_mm::ap_ST_st15_fsm_14 = "100000000000000";
const sc_lv<18> sparse_mm::ap_ST_st16_fsm_15 = "1000000000000000";
const sc_lv<18> sparse_mm::ap_ST_st17_fsm_16 = "10000000000000000";
const sc_lv<18> sparse_mm::ap_ST_st18_fsm_17 = "100000000000000000";
const sc_lv<32> sparse_mm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> sparse_mm::ap_const_lv1_1 = "1";
const sc_lv<32> sparse_mm::ap_const_lv32_1 = "1";
const sc_lv<32> sparse_mm::ap_const_lv32_2 = "10";
const sc_lv<1> sparse_mm::ap_const_lv1_0 = "0";
const sc_lv<32> sparse_mm::ap_const_lv32_5 = "101";
const sc_lv<32> sparse_mm::ap_const_lv32_8 = "1000";
const sc_lv<32> sparse_mm::ap_const_lv32_9 = "1001";
const sc_lv<32> sparse_mm::ap_const_lv32_A = "1010";
const sc_lv<32> sparse_mm::ap_const_lv32_D = "1101";
const sc_lv<32> sparse_mm::ap_const_lv32_E = "1110";
const sc_lv<32> sparse_mm::ap_const_lv32_10 = "10000";
const sc_lv<31> sparse_mm::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> sparse_mm::ap_const_lv32_11 = "10001";
const sc_lv<32> sparse_mm::ap_const_lv32_3 = "11";
const sc_lv<32> sparse_mm::ap_const_lv32_4 = "100";
const sc_lv<31> sparse_mm::ap_const_lv31_1 = "1";
const sc_lv<32> sparse_mm::ap_const_lv32_1F = "11111";
const sc_lv<32> sparse_mm::ap_const_lv32_20 = "100000";
const sc_lv<32> sparse_mm::ap_const_lv32_3F = "111111";
const sc_lv<32> sparse_mm::ap_const_lv32_6 = "110";

sparse_mm::sparse_mm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sparse_mm_mul_32s_32s_32_3_U1 = new sparse_mm_mul_32s_32s_32_3<1,3,32,32,32>("sparse_mm_mul_32s_32s_32_3_U1");
    sparse_mm_mul_32s_32s_32_3_U1->clk(ap_clk);
    sparse_mm_mul_32s_32s_32_3_U1->reset(ap_rst);
    sparse_mm_mul_32s_32s_32_3_U1->din0(iay_reg_114);
    sparse_mm_mul_32s_32s_32_3_U1->din1(b_x);
    sparse_mm_mul_32s_32s_32_3_U1->ce(grp_fu_210_ce);
    sparse_mm_mul_32s_32s_32_3_U1->dout(grp_fu_210_p2);
    sparse_mm_mul_31ns_32s_32_3_U2 = new sparse_mm_mul_31ns_32s_32_3<1,3,31,32,32>("sparse_mm_mul_31ns_32s_32_3_U2");
    sparse_mm_mul_31ns_32s_32_3_U2->clk(ap_clk);
    sparse_mm_mul_31ns_32s_32_3_U2->reset(ap_rst);
    sparse_mm_mul_31ns_32s_32_3_U2->din0(grp_fu_215_p0);
    sparse_mm_mul_31ns_32s_32_3_U2->din1(b_x);
    sparse_mm_mul_31ns_32s_32_3_U2->ce(grp_fu_215_ce);
    sparse_mm_mul_31ns_32s_32_3_U2->dout(grp_fu_215_p2);
    sparse_mm_mul_32s_32s_32_3_U3 = new sparse_mm_mul_32s_32s_32_3<1,3,32,32,32>("sparse_mm_mul_32s_32s_32_3_U3");
    sparse_mm_mul_32s_32s_32_3_U3->clk(ap_clk);
    sparse_mm_mul_32s_32s_32_3_U3->reset(ap_rst);
    sparse_mm_mul_32s_32s_32_3_U3->din0(b_load_reg_314);
    sparse_mm_mul_32s_32s_32_3_U3->din1(value_reg_294);
    sparse_mm_mul_32s_32s_32_3_U3->ce(grp_fu_228_ce);
    sparse_mm_mul_32s_32s_32_3_U3->dout(grp_fu_228_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_2_fu_171_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_a_i_1_fu_165_p2);
    sensitive << ( a_i_reg_101 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_149_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_149_p2 );

    SC_METHOD(thread_ap_sig_bdd_105);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_122);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_131);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_139);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_148);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_157);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_166);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_183);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_200);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_208);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_247);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_bdd_131 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_bdd_139 );

    SC_METHOD(thread_ap_sig_cseq_ST_st14_fsm_13);
    sensitive << ( ap_sig_bdd_148 );

    SC_METHOD(thread_ap_sig_cseq_ST_st15_fsm_14);
    sensitive << ( ap_sig_bdd_157 );

    SC_METHOD(thread_ap_sig_cseq_ST_st17_fsm_16);
    sensitive << ( ap_sig_bdd_166 );

    SC_METHOD(thread_ap_sig_cseq_ST_st18_fsm_17);
    sensitive << ( ap_sig_bdd_183 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_34 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_78 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_89 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_200 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_208 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_105 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_247 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_bdd_122 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( tmp_s_fu_223_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_sig_cseq_ST_st18_fsm_17 );
    sensitive << ( tmp_4_fu_241_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_sig_cseq_ST_st18_fsm_17 );

    SC_METHOD(thread_c_d0);
    sensitive << ( ap_sig_cseq_ST_st18_fsm_17 );
    sensitive << ( sum_reg_129 );

    SC_METHOD(thread_c_we0);
    sensitive << ( ap_sig_cseq_ST_st18_fsm_17 );

    SC_METHOD(thread_column_cast_fu_190_p1);
    sensitive << ( column_fu_180_p4 );

    SC_METHOD(thread_column_fu_180_p4);
    sensitive << ( a_q0 );

    SC_METHOD(thread_grp_fu_210_ce);

    SC_METHOD(thread_grp_fu_215_ce);

    SC_METHOD(thread_grp_fu_215_p0);
    sensitive << ( column_cast_reg_289 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_grp_fu_228_ce);

    SC_METHOD(thread_iay_1_fu_204_p2);
    sensitive << ( iay_reg_114 );

    SC_METHOD(thread_ibx_1_fu_154_p2);
    sensitive << ( ibx_reg_90 );

    SC_METHOD(thread_ibx_cast_fu_145_p1);
    sensitive << ( ibx_reg_90 );

    SC_METHOD(thread_sum_1_fu_232_p2);
    sensitive << ( tmp_7_reg_319 );
    sensitive << ( sum_reg_129 );

    SC_METHOD(thread_tmp_1_fu_160_p2);
    sensitive << ( a_y );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( iay_reg_114 );

    SC_METHOD(thread_tmp_2_fu_171_p1);
    sensitive << ( a_i_reg_101 );

    SC_METHOD(thread_tmp_4_fu_241_p1);
    sensitive << ( tmp_5_fu_237_p2 );

    SC_METHOD(thread_tmp_5_fu_237_p2);
    sensitive << ( ibx_cast_reg_258 );
    sensitive << ( tmp_3_reg_329 );

    SC_METHOD(thread_tmp_6_fu_176_p1);
    sensitive << ( a_q0 );

    SC_METHOD(thread_tmp_9_fu_219_p2);
    sensitive << ( ibx_cast_reg_258 );
    sensitive << ( tmp_8_reg_304 );

    SC_METHOD(thread_tmp_fu_149_p1);
    sensitive << ( b_x );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_tmp_fu_149_p2);
    sensitive << ( ibx_cast_fu_145_p1 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_fu_149_p1 );

    SC_METHOD(thread_tmp_s_fu_223_p1);
    sensitive << ( tmp_9_fu_219_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_1_fu_160_p2 );
    sensitive << ( tmp_6_fu_176_p1 );
    sensitive << ( tmp_fu_149_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sparse_mm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, a_y, "(port)a_y");
    sc_trace(mVcdFile, a_x, "(port)a_x");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, b_y, "(port)b_y");
    sc_trace(mVcdFile, b_x, "(port)b_x");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_we0, "(port)c_we0");
    sc_trace(mVcdFile, c_d0, "(port)c_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_34, "ap_sig_bdd_34");
    sc_trace(mVcdFile, ibx_cast_fu_145_p1, "ibx_cast_fu_145_p1");
    sc_trace(mVcdFile, ibx_cast_reg_258, "ibx_cast_reg_258");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_78, "ap_sig_bdd_78");
    sc_trace(mVcdFile, ibx_1_fu_154_p2, "ibx_1_fu_154_p2");
    sc_trace(mVcdFile, ibx_1_reg_267, "ibx_1_reg_267");
    sc_trace(mVcdFile, a_i_1_fu_165_p2, "a_i_1_fu_165_p2");
    sc_trace(mVcdFile, a_i_1_reg_275, "a_i_1_reg_275");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_89, "ap_sig_bdd_89");
    sc_trace(mVcdFile, tmp_1_fu_160_p2, "tmp_1_fu_160_p2");
    sc_trace(mVcdFile, column_cast_fu_190_p1, "column_cast_fu_190_p1");
    sc_trace(mVcdFile, column_cast_reg_289, "column_cast_reg_289");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_105, "ap_sig_bdd_105");
    sc_trace(mVcdFile, value_reg_294, "value_reg_294");
    sc_trace(mVcdFile, iay_1_fu_204_p2, "iay_1_fu_204_p2");
    sc_trace(mVcdFile, iay_1_reg_299, "iay_1_reg_299");
    sc_trace(mVcdFile, tmp_6_fu_176_p1, "tmp_6_fu_176_p1");
    sc_trace(mVcdFile, grp_fu_215_p2, "grp_fu_215_p2");
    sc_trace(mVcdFile, tmp_8_reg_304, "tmp_8_reg_304");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_122, "ap_sig_bdd_122");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_131, "ap_sig_bdd_131");
    sc_trace(mVcdFile, b_load_reg_314, "b_load_reg_314");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_bdd_139, "ap_sig_bdd_139");
    sc_trace(mVcdFile, grp_fu_228_p2, "grp_fu_228_p2");
    sc_trace(mVcdFile, tmp_7_reg_319, "tmp_7_reg_319");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st14_fsm_13, "ap_sig_cseq_ST_st14_fsm_13");
    sc_trace(mVcdFile, ap_sig_bdd_148, "ap_sig_bdd_148");
    sc_trace(mVcdFile, sum_1_fu_232_p2, "sum_1_fu_232_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st15_fsm_14, "ap_sig_cseq_ST_st15_fsm_14");
    sc_trace(mVcdFile, ap_sig_bdd_157, "ap_sig_bdd_157");
    sc_trace(mVcdFile, grp_fu_210_p2, "grp_fu_210_p2");
    sc_trace(mVcdFile, tmp_3_reg_329, "tmp_3_reg_329");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st17_fsm_16, "ap_sig_cseq_ST_st17_fsm_16");
    sc_trace(mVcdFile, ap_sig_bdd_166, "ap_sig_bdd_166");
    sc_trace(mVcdFile, ibx_reg_90, "ibx_reg_90");
    sc_trace(mVcdFile, a_i_reg_101, "a_i_reg_101");
    sc_trace(mVcdFile, tmp_fu_149_p2, "tmp_fu_149_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st18_fsm_17, "ap_sig_cseq_ST_st18_fsm_17");
    sc_trace(mVcdFile, ap_sig_bdd_183, "ap_sig_bdd_183");
    sc_trace(mVcdFile, iay_reg_114, "iay_reg_114");
    sc_trace(mVcdFile, sum_reg_129, "sum_reg_129");
    sc_trace(mVcdFile, tmp_2_fu_171_p1, "tmp_2_fu_171_p1");
    sc_trace(mVcdFile, tmp_s_fu_223_p1, "tmp_s_fu_223_p1");
    sc_trace(mVcdFile, tmp_4_fu_241_p1, "tmp_4_fu_241_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_200, "ap_sig_bdd_200");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_208, "ap_sig_bdd_208");
    sc_trace(mVcdFile, tmp_fu_149_p1, "tmp_fu_149_p1");
    sc_trace(mVcdFile, column_fu_180_p4, "column_fu_180_p4");
    sc_trace(mVcdFile, grp_fu_215_p0, "grp_fu_215_p0");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_247, "ap_sig_bdd_247");
    sc_trace(mVcdFile, tmp_9_fu_219_p2, "tmp_9_fu_219_p2");
    sc_trace(mVcdFile, tmp_5_fu_237_p2, "tmp_5_fu_237_p2");
    sc_trace(mVcdFile, grp_fu_210_ce, "grp_fu_210_ce");
    sc_trace(mVcdFile, grp_fu_215_ce, "grp_fu_215_ce");
    sc_trace(mVcdFile, grp_fu_228_ce, "grp_fu_228_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sparse_mm.hdltvin.dat");
    mHdltvoutHandle.open("sparse_mm.hdltvout.dat");
}

sparse_mm::~sparse_mm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sparse_mm_mul_32s_32s_32_3_U1;
    delete sparse_mm_mul_31ns_32s_32_3_U2;
    delete sparse_mm_mul_32s_32s_32_3_U3;
}

void sparse_mm::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_17.read()))) {
        a_i_reg_101 = a_i_1_reg_275.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read()))) {
        a_i_reg_101 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_14.read())) {
        iay_reg_114 = iay_reg_114.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_17.read())) {
        iay_reg_114 = iay_1_reg_299.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read()))) {
        iay_reg_114 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_160_p2.read(), ap_const_lv1_0))) {
        ibx_reg_90 = ibx_1_reg_267.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        ibx_reg_90 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st15_fsm_14.read())) {
        sum_reg_129 = sum_1_fu_232_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_17.read()))) {
        sum_reg_129 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        a_i_1_reg_275 = a_i_1_fu_165_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read())) {
        b_load_reg_314 = b_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        column_cast_reg_289 = column_cast_fu_190_p1.read();
        value_reg_294 = a_q0.read().range(63, 32);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_176_p1.read()))) {
        iay_1_reg_299 = iay_1_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ibx_1_reg_267 = ibx_1_fu_154_p2.read();
        ibx_cast_reg_258 = ibx_cast_fu_145_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st17_fsm_16.read())) {
        tmp_3_reg_329 = grp_fu_210_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st14_fsm_13.read())) {
        tmp_7_reg_319 = grp_fu_228_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        tmp_8_reg_304 = grp_fu_215_p2.read();
    }
}

void sparse_mm::thread_a_address0() {
    a_address0 =  (sc_lv<22>) (tmp_2_fu_171_p1.read());
}

void sparse_mm::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void sparse_mm::thread_a_i_1_fu_165_p2() {
    a_i_1_fu_165_p2 = (!a_i_reg_101.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(a_i_reg_101.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sparse_mm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_bdd_105() {
    ap_sig_bdd_105 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void sparse_mm::thread_ap_sig_bdd_122() {
    ap_sig_bdd_122 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void sparse_mm::thread_ap_sig_bdd_131() {
    ap_sig_bdd_131 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void sparse_mm::thread_ap_sig_bdd_139() {
    ap_sig_bdd_139 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void sparse_mm::thread_ap_sig_bdd_148() {
    ap_sig_bdd_148 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(13, 13));
}

void sparse_mm::thread_ap_sig_bdd_157() {
    ap_sig_bdd_157 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(14, 14));
}

void sparse_mm::thread_ap_sig_bdd_166() {
    ap_sig_bdd_166 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(16, 16));
}

void sparse_mm::thread_ap_sig_bdd_183() {
    ap_sig_bdd_183 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(17, 17));
}

void sparse_mm::thread_ap_sig_bdd_200() {
    ap_sig_bdd_200 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void sparse_mm::thread_ap_sig_bdd_208() {
    ap_sig_bdd_208 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void sparse_mm::thread_ap_sig_bdd_247() {
    ap_sig_bdd_247 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void sparse_mm::thread_ap_sig_bdd_34() {
    ap_sig_bdd_34 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void sparse_mm::thread_ap_sig_bdd_78() {
    ap_sig_bdd_78 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void sparse_mm::thread_ap_sig_bdd_89() {
    ap_sig_bdd_89 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void sparse_mm::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_bdd_131.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_bdd_139.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st14_fsm_13() {
    if (ap_sig_bdd_148.read()) {
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st15_fsm_14() {
    if (ap_sig_bdd_157.read()) {
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st17_fsm_16() {
    if (ap_sig_bdd_166.read()) {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st18_fsm_17() {
    if (ap_sig_bdd_183.read()) {
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_34.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_78.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_89.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_200.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_208.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_105.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_247.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void sparse_mm::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_bdd_122.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void sparse_mm::thread_b_address0() {
    b_address0 =  (sc_lv<11>) (tmp_s_fu_223_p1.read());
}

void sparse_mm::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void sparse_mm::thread_c_address0() {
    c_address0 =  (sc_lv<11>) (tmp_4_fu_241_p1.read());
}

void sparse_mm::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_17.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void sparse_mm::thread_c_d0() {
    c_d0 = sum_reg_129.read();
}

void sparse_mm::thread_c_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st18_fsm_17.read()))) {
        c_we0 = ap_const_logic_1;
    } else {
        c_we0 = ap_const_logic_0;
    }
}

void sparse_mm::thread_column_cast_fu_190_p1() {
    column_cast_fu_190_p1 = esl_zext<32,31>(column_fu_180_p4.read());
}

void sparse_mm::thread_column_fu_180_p4() {
    column_fu_180_p4 = a_q0.read().range(31, 1);
}

void sparse_mm::thread_grp_fu_210_ce() {
    grp_fu_210_ce = ap_const_logic_1;
}

void sparse_mm::thread_grp_fu_215_ce() {
    grp_fu_215_ce = ap_const_logic_1;
}

void sparse_mm::thread_grp_fu_215_p0() {
    grp_fu_215_p0 =  (sc_lv<31>) (column_cast_reg_289.read());
}

void sparse_mm::thread_grp_fu_228_ce() {
    grp_fu_228_ce = ap_const_logic_1;
}

void sparse_mm::thread_iay_1_fu_204_p2() {
    iay_1_fu_204_p2 = (!iay_reg_114.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(iay_reg_114.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sparse_mm::thread_ibx_1_fu_154_p2() {
    ibx_1_fu_154_p2 = (!ibx_reg_90.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ibx_reg_90.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void sparse_mm::thread_ibx_cast_fu_145_p1() {
    ibx_cast_fu_145_p1 = esl_zext<32,31>(ibx_reg_90.read());
}

void sparse_mm::thread_sum_1_fu_232_p2() {
    sum_1_fu_232_p2 = (!tmp_7_reg_319.read().is_01() || !sum_reg_129.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_reg_319.read()) + sc_biguint<32>(sum_reg_129.read()));
}

void sparse_mm::thread_tmp_1_fu_160_p2() {
    tmp_1_fu_160_p2 = (!iay_reg_114.read().is_01() || !a_y.read().is_01())? sc_lv<1>(): (sc_biguint<32>(iay_reg_114.read()) < sc_biguint<32>(a_y.read()));
}

void sparse_mm::thread_tmp_2_fu_171_p1() {
    tmp_2_fu_171_p1 = esl_sext<64,32>(a_i_reg_101.read());
}

void sparse_mm::thread_tmp_4_fu_241_p1() {
    tmp_4_fu_241_p1 = esl_sext<64,32>(tmp_5_fu_237_p2.read());
}

void sparse_mm::thread_tmp_5_fu_237_p2() {
    tmp_5_fu_237_p2 = (!tmp_3_reg_329.read().is_01() || !ibx_cast_reg_258.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_reg_329.read()) + sc_biguint<32>(ibx_cast_reg_258.read()));
}

void sparse_mm::thread_tmp_6_fu_176_p1() {
    tmp_6_fu_176_p1 = a_q0.read().range(1-1, 0);
}

void sparse_mm::thread_tmp_9_fu_219_p2() {
    tmp_9_fu_219_p2 = (!tmp_8_reg_304.read().is_01() || !ibx_cast_reg_258.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_reg_304.read()) + sc_biguint<32>(ibx_cast_reg_258.read()));
}

void sparse_mm::thread_tmp_fu_149_p1() {
    tmp_fu_149_p1 = b_x.read();
}

void sparse_mm::thread_tmp_fu_149_p2() {
    tmp_fu_149_p2 = (!ibx_cast_fu_145_p1.read().is_01() || !tmp_fu_149_p1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(ibx_cast_fu_145_p1.read()) < sc_bigint<32>(tmp_fu_149_p1.read()));
}

void sparse_mm::thread_tmp_s_fu_223_p1() {
    tmp_s_fu_223_p1 = esl_zext<64,32>(tmp_9_fu_219_p2.read());
}

void sparse_mm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_149_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(tmp_1_fu_160_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_176_p1.read())) {
                ap_NS_fsm = ap_ST_st16_fsm_15;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXX";
            break;
    }
}

void sparse_mm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_y\" :  \"" << a_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_x\" :  \"" << a_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_y\" :  \"" << b_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_x\" :  \"" << b_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_we0\" :  \"" << c_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_d0\" :  \"" << c_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

