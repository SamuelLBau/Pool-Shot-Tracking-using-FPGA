-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (21 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_y : IN STD_LOGIC_VECTOR (31 downto 0);
    a_x : IN STD_LOGIC_VECTOR (31 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_y : IN STD_LOGIC_VECTOR (31 downto 0);
    b_x : IN STD_LOGIC_VECTOR (31 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sparse_mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sparse_mm,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.280000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=462,HLS_SYN_LUT=355}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal ibx_cast_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ibx_cast_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_78 : BOOLEAN;
    signal ibx_1_fu_154_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ibx_1_reg_267 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_i_1_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_i_1_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_89 : BOOLEAN;
    signal tmp_1_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_cast_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_cast_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_105 : BOOLEAN;
    signal value_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal iay_1_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iay_1_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_176_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_122 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal b_load_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal sum_1_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal ibx_reg_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal a_i_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal iay_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_208 : BOOLEAN;
    signal tmp_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_fu_180_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal tmp_9_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component sparse_mm_mul_32s_32s_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_mm_mul_31ns_32s_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sparse_mm_mul_32s_32s_32_3_U1 : component sparse_mm_mul_32s_32s_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => iay_reg_114,
        din1 => b_x,
        ce => grp_fu_210_ce,
        dout => grp_fu_210_p2);

    sparse_mm_mul_31ns_32s_32_3_U2 : component sparse_mm_mul_31ns_32s_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => b_x,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    sparse_mm_mul_32s_32s_32_3_U3 : component sparse_mm_mul_32s_32s_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_load_reg_314,
        din1 => value_reg_294,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- a_i_reg_101 assign process. --
    a_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
                a_i_reg_101 <= a_i_1_reg_275;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_fu_149_p2)))) then 
                a_i_reg_101 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- iay_reg_114 assign process. --
    iay_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                iay_reg_114 <= iay_reg_114;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                iay_reg_114 <= iay_1_reg_299;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_fu_149_p2)))) then 
                iay_reg_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- ibx_reg_90 assign process. --
    ibx_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (tmp_1_fu_160_p2 = ap_const_lv1_0))) then 
                ibx_reg_90 <= ibx_1_reg_267;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                ibx_reg_90 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- sum_reg_129 assign process. --
    sum_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                sum_reg_129 <= sum_1_fu_232_p2;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_fu_149_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
                sum_reg_129 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                a_i_1_reg_275 <= a_i_1_fu_165_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                b_load_reg_314 <= b_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                    column_cast_reg_289(30 downto 0) <= column_cast_fu_190_p1(30 downto 0);
                value_reg_294 <= a_q0(63 downto 32);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp_6_fu_176_p1)))) then
                iay_1_reg_299 <= iay_1_fu_204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                ibx_1_reg_267 <= ibx_1_fu_154_p2;
                    ibx_cast_reg_258(30 downto 0) <= ibx_cast_fu_145_p1(30 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_3_reg_329 <= grp_fu_210_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_7_reg_319 <= grp_fu_228_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_8_reg_304 <= grp_fu_215_p2;
            end if;
        end if;
    end process;
    ibx_cast_reg_258(31) <= '0';
    column_cast_reg_289(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_1_fu_160_p2, tmp_6_fu_176_p1, tmp_fu_149_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = tmp_fu_149_p2)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((tmp_1_fu_160_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = tmp_6_fu_176_p1))) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_address0 <= tmp_2_fu_171_p1(22 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_i_1_fu_165_p2 <= std_logic_vector(unsigned(a_i_reg_101) + unsigned(ap_const_lv32_1));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_149_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_fu_149_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_149_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_fu_149_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_105 assign process. --
    ap_sig_bdd_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_105 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_122 assign process. --
    ap_sig_bdd_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_122 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_139 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_208 assign process. --
    ap_sig_bdd_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_208 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_78 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_89 assign process. --
    ap_sig_bdd_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_139)
    begin
        if (ap_sig_bdd_139) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_78)
    begin
        if (ap_sig_bdd_78) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_89)
    begin
        if (ap_sig_bdd_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_208)
    begin
        if (ap_sig_bdd_208) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_105)
    begin
        if (ap_sig_bdd_105) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_122)
    begin
        if (ap_sig_bdd_122) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_s_fu_223_p1(11 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= tmp_4_fu_241_p1(11 - 1 downto 0);

    -- c_ce0 assign process. --
    c_ce0_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= sum_reg_129;

    -- c_we0 assign process. --
    c_we0_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    column_cast_fu_190_p1 <= std_logic_vector(resize(unsigned(column_fu_180_p4),32));
    column_fu_180_p4 <= a_q0(31 downto 1);
    grp_fu_210_ce <= ap_const_logic_1;
    grp_fu_215_ce <= ap_const_logic_1;
    grp_fu_215_p0 <= column_cast_reg_289(31 - 1 downto 0);
    grp_fu_228_ce <= ap_const_logic_1;
    iay_1_fu_204_p2 <= std_logic_vector(signed(iay_reg_114) + signed(ap_const_lv32_1));
    ibx_1_fu_154_p2 <= std_logic_vector(unsigned(ibx_reg_90) + unsigned(ap_const_lv31_1));
    ibx_cast_fu_145_p1 <= std_logic_vector(resize(unsigned(ibx_reg_90),32));
    sum_1_fu_232_p2 <= std_logic_vector(unsigned(tmp_7_reg_319) + unsigned(sum_reg_129));
    tmp_1_fu_160_p2 <= "1" when (unsigned(iay_reg_114) < unsigned(a_y)) else "0";
        tmp_2_fu_171_p1 <= std_logic_vector(resize(signed(a_i_reg_101),64));

        tmp_4_fu_241_p1 <= std_logic_vector(resize(signed(tmp_5_fu_237_p2),64));

    tmp_5_fu_237_p2 <= std_logic_vector(unsigned(tmp_3_reg_329) + unsigned(ibx_cast_reg_258));
    tmp_6_fu_176_p1 <= a_q0(1 - 1 downto 0);
    tmp_9_fu_219_p2 <= std_logic_vector(unsigned(tmp_8_reg_304) + unsigned(ibx_cast_reg_258));
    tmp_fu_149_p1 <= b_x;
    tmp_fu_149_p2 <= "1" when (signed(ibx_cast_fu_145_p1) < signed(tmp_fu_149_p1)) else "0";
    tmp_s_fu_223_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_219_p2),64));
end behav;
